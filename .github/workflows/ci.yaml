name: CI

on:
  pull_request: ~
  push:
    branches:
      - 'master'
      - 'starling-v*-release'
      - 'v*-release'
    tags:
      - 'v*'
      - 'starling-v*'
      - 'gnss-converters-v*'

jobs:

  ubuntu-gcc6:
    runs-on: ubuntu-18.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install gcc-6
        run: |
          sudo apt-get update && \
          sudo apt-get install build-essential software-properties-common -y && \
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
          sudo apt-get update && \
          sudo apt-get install gcc-6 g++-6 -y && \
          gcc -v

      - name: Run build
        env:
          CC: gcc-6
          CXX: g++-6
          TESTENV: gcc6
          GCCVER: "6"
        run: |
          bash ./ci-build.sh

  ubuntu-codecov:
    runs-on: ubuntu-18.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install llvm-cov
        run: |
          sudo apt-get update && sudo apt-get install llvm -y

      - name: Run build
        env:
          CC: clang
          CXX: clang++
          TESTENV: codecov
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: swift-nav
          SONAR_PROJECT_KEY: swift-nav_gnss-converters-private
          SONAR_PROJECT_NAME: gnss-converters-private
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_SCANNER_VERSION: 4.2.0.1873

        run: |
          bash ./ci-build.sh

  build:
    strategy:
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-11]
        include:
          - os: windows-2019
            cc: x86_64-w64-mingw32-gcc
            cxx: x86_64-w64-mingw32-g++
            name: windows
            cmake: MinGW Makefiles
          - os: ubuntu-18.04
            cc: clang-6.0
            cxx: clang++-6.0
            name: linux
            cmake: Unix Makefiles
          - os: macos-11
            cc: clang
            cxx: clang++
            name: macos
            cmake: Unix Makefiles
    runs-on: ${{ matrix.os }}
    steps:
      - name: Windows Git Preamble
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          git config --global core.compression 0

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          fetch-depth: 0

      - name: Install SQLite
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          choco install -y --no-progress sqlite;

      - name: Install msys2 packages
        if: ${{ matrix.os == 'windows-2019' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: git base-devel mingw-w64-x86_64-toolchain
          update: true

      - name: Install MinGW Rust toolchain
        if: ${{ matrix.os == 'windows-2019' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-pc-windows-gnu
          override: true
          components: rustfmt, clippy

      - name: Install stable Rust
        if: ${{ matrix.os == 'ubuntu-18.04' || matrix.os == 'macos-11' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install clang-6
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt-get update && \
          sudo apt-get install build-essential software-properties-common -y && \
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
          sudo apt-get update && \
          sudo apt-get install clang-6.0 llvm-6.0 clang-tidy-6.0 -y && \
          clang-6.0 -v && \
          clang++-6.0 -v

      - name: Rust build
        shell: bash
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          TESTENV: rust
          OS_NAME: ${{ matrix.name }}
          CMAKE_GENERATOR: ${{ matrix.cmake }}
        run: |
          bash ./ci-build.sh

      - name: Create Package
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        shell: bash
        env:
          CC: ${{ matrix.cc }}
          TESTENV: package
          OS_NAME: ${{ matrix.name }}
        run: |
          bash ./ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - name: Upload Package
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.name}}-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  trigger-release:
    needs: [ubuntu-gcc6, ubuntu-codecov, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Start Release workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Release
          token: ${{ secrets.PERSONAL_TOKEN }}
          inputs: '{ "github_ref": "${{ github.ref }}", "run_id": "${{ github.run_id }}" }'
